(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = {
  init: function() {
    var $body, $screen, $signup_button, $signup_cancel, $signup_form, closeOverlay, open;
    $body = $('body');
    $signup_button = $('[data-signup]');
    $signup_cancel = $('[data-cancel-signup]');
    $signup_form = $('#signup');
    $screen = null;
    open = false;
    closeOverlay = function() {
      $signup_form.velocity({
        translateY: ['200%', '0%']
      }, [250, 20]);
      $screen.velocity({
        opacity: 0
      }, {
        complete: function() {
          return $screen.remove();
        }
      });
      return open = false;
    };
    $signup_form.on('click', '[data-close]', function() {
      closeOverlay();
      return $signup_button.replaceWith('<p>Thanks for signing up!</p>');
    });
    $signup_cancel.on('click', closeOverlay);
    $signup_button.on('click', function() {
      var translate;
      translate = open ? ['200%', '0%'] : ['0%', '200%'];
      $signup_form.velocity({
        translateY: translate
      }, [250, 20]);
      if (open) {
        $screen.velocity({
          opacity: 0
        }, {
          complete: function() {
            return $screen.remove();
          }
        });
      } else {
        $screen = $('<div class="signup-form__overlay-screen"></div>');
        $screen.on('click', closeOverlay);
        $screen.css({
          opacity: 0
        });
        $body.append($screen);
        $screen.velocity({
          opacity: 1
        });
      }
      return open = !open;
    });
    return $signup_form.on('submit', function(e) {
      var $button, $form, $form_pieces, data, url;
      e.preventDefault();
      $form = $(this);
      $button = $form.find('button[type=submit] .top');
      $form_pieces = $form.find('.stagger-out');
      $button.text('Sending your info...');
      url = $form.attr('action');
      data = $form.serialize();
      return $.ajax({
        url: url,
        data: data,
        dataType: 'jsonp'
      }).done(function(data) {
        if (data.result === 'success') {
          return $form_pieces.velocity("transition.slideUpBigOut", {
            stagger: 100,
            complete: function() {
              var $replacement;
              $replacement = $("<p class='signup-form__success'>" + data.msg + "</p><button data-close class='primary-button'><div class='top'>Close</div><div class='bottom'></div></button>");
              $replacement.css({
                opacity: 0
              });
              $form.empty().append($replacement);
              return $replacement.velocity({
                opacity: [1, 0]
              });
            }
          });
        } else {
          return $button.text('There was an error. Try again.');
        }
      });
    });
  }
};



},{}],2:[function(require,module,exports){
var Signup, easingEq;

Signup = require('./lib/signup');

easingEq = [0.19, 1, 0.22, 1];

$(function() {
  return Signup.init();
});



},{"./lib/signup":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
